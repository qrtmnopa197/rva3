subs$softs[i] <- length(which(c(subs$att_checks_passed[i] == 3,subs$answers_incorrect[i] == 3,
subs$valrat_skipped_percent[i] > .10,
subs$sd_probrat[i] < .07, subs$probrat_skipped_percent[i] > .10)))
}
sub_soft_fail <- filter(subs,softs >= 2) #identify those who meet more than 2 soft cutoffs
subs_to_exclude <- unique(c(sub_hard_fail$id,sub_soft_fail$id)) #get subjects who failed either set of criteria
#clean data
trials <- trials %>% filter(!(id %in% subs_to_exclude))
subs <- subs %>% filter(!(id %in% subs_to_exclude))
length(subs_to_exclude)/(nrow(subs)+length(subs_to_exclude)) #get percent excluded
nrow(subs)
length(subs_to_exclude)
38/208
trials <- add_sub_indices(trials) #add subject indices to the df. These will match the indices used in Stan.
trials <- add_probe_number(trials,newcol="vrat_number",val_col="val_rat") #add valence rating number
trials <- add_probe_number(trials,newcol="prat_number",val_col="prob_rat") #add probability rating number
# Create mean-centered block and trial numbers
trials <- mutate(trials, bl_cent = block - mean(block), tr_cent = trial_blk - mean(trial_blk))
# Add fractal indexes
trials <- trials %>% mutate(frac_ix = case_when(
frac_img == 1 ~ 1,
frac_img == 9 ~ 2,
frac_img == 3 ~ 3,
frac_img == 5 ~ 4,
)) %>%
mutate(alt_frac_ix = case_when(
frac_ix == 1 ~ 2,
frac_ix == 2 ~ 1,
frac_ix == 3 ~ 4,
frac_ix == 4 ~ 3
))
sum(subs$sig_emot == "Yes")/nrow(subs)
sum(subs$sig_emot == "Yes")/nrow(subs)
sum(subs$sig_emot == "Yes")
subs$sig_emot
subs$sig_emot == "Yes"
sig_emot <- !is.na(subs$sig_emot)
sig_emot
sig_emot <- !is.na(subs$sig_emot)
sig_emot
sig_emot <- subs$sig_emot[!is.na(subs$sig_emot)]
sig_emot
sum(sig_emot == "Yes")/nrow(subs)
subs$age <- as.numeric(subs$age)
mean(subs$age)
median(subs$age)
sd(subs$age)
subs$age <- as.numeric(subs$age)
mean(subs$age,na.rm=T)
median(subs$age,na.rm=T)
sd(subs$age,na.rm=T)
sum(subs$gender=="Male")
sum(subs$gender=="Male",na.rm=T)
sum(subs$gender=="Female",na.rm=T)
sum(subs$gender=="Non-binary",na.rm=T)
view(head(trials))
nrow(trials)/96
nrow(trials)
prereg$diagnostics
prereg$diagnostics
view(filt_sum(prereg$sum,"mu"))
view(prereg$diagnostics$Rhat)
prereg_eff <- get_draws("prereg_rva3",model_out_dir=model_out_dir,vars=c("wx_mu"))
create_interval_plot(arr = prereg_eff, xmin = -0.02, xmax = .01)
head(prereg_eff)
create_interval_plot(arr = prereg_eff, xmin = -0.02, xmax = .01,names=c("wx_mu[1]","wx_mu[2]","wx_mu[3]","wx_mu[4]"))
create_interval_plot(arr = prereg_eff, xmin = -0.02, xmax = .01,names=c("wx_mu[1]","wx_mu[2]","wx_mu[3]"))
create_interval_plot(arr = prereg_eff, xmin = -0.02, xmax = .01,names=c("wx_mu[3]","wx_mu[2]","wx_mu[1]"))
prereg_eff[,,"wx_mu[2]"] > prereg_eff[,,"wx_mu[3]"]
mean(prereg_eff[,,"wx_mu[2]"] > prereg_eff[,,"wx_mu[3]"])
mean(prereg_eff[,,"wx_mu[2]"] < prereg_eff[,,"wx_mu[3]"])
create_interval_plot(arr = prereg_eff, xmin = -0.02, xmax = .01,names=c("wx_mu[3]","wx_mu[2]","wx_mu[1]"))
prereg_eff_vec_lens <- prereg_eff[,,-"wx_mu[4]"]
prereg_eff_vec_lens <- prereg_eff[,,c("wx_mu[1]","wx_mu[2]","wx_mu[3]"]
prereg_eff_vec_lens <- prereg_eff[,,c("wx_mu[1]","wx_mu[2]","wx_mu[3]")]
v_sh-v_hid <- prereg_eff[,,c("wx_mu[2]")] - prereg_eff[,,c("wx_mu[3]")]
v_sh_v_hid <- prereg_eff[,,c("wx_mu[2]")] - prereg_eff[,,c("wx_mu[3]")]
v_sh_v_hid
eff_dims <- abind(prereg_eff[,,c("wx_mu[1]")],prereg_eff[,,c("wx_mu[2]")] - prereg_eff[,,c("wx_mu[3]")],along=3)
eff_dims
head(eff_dims)
prereg_eff[,,c("wx_mu[2]")] - prereg_eff[,,c("wx_mu[3]")]
vec_ws_prereg <- apply(eff_dims,c(1,2),vec_optim,dvec=dvec_mat,init_pars=c(0,0,0)) #get vector weights
set.seed(7)
rew <- c(1,0)
rpe <- c(0.5,-0.5)
dvec_mat <- cbind(rew,rpe) #turn into matrix
vec_ws_prereg <- apply(eff_dims,c(1,2),vec_optim,dvec=dvec_mat,init_pars=c(0,0,0)) #get vector weights
vec_ws_prereg <- apply(eff_dims,c(1,2),vec_optim,dvec=dvec_mat,init_pars=c(0,0)) #get vector weights
vec_ws_prereg_org <- aperm(vec_ws_prereg,c(2,3,1)) #rearrange dimensions
dimnames(vec_ws_prereg_org)[[3]] <- c("rew","rpe") #name appropriately
create_interval_plot(vec_ws_prereg_org,names = c("mm","rpe","rew"),xmin = -.012, xmax = .1)
create_interval_plot(vec_ws_prereg_org,names = c("rpe","rew"),xmin = -.012, xmax = .1)
create_interval_plot(vec_ws_prereg_org,names = c("rpe","rew"),xmin = -.012, xmax = .01)
vec_ws_prereg_org
head(vec_ws_prereg_org)
vec_ws_prereg_org[,,"rew"] > vec_ws_prereg_org[,,"rpe"]
mean(vec_ws_prereg_org[,,"rew"] > vec_ws_prereg_org[,,"rpe"])
.07^2
.7^2+.7^2
.71^2+.71^2
set.seed(7)
rew <- c(1,0)
rpe <- c(0.71,-0.71)
dvec_mat <- cbind(rew,rpe) #turn into matrix
eff_dims <- abind(prereg_eff[,,c("wx_mu[1]")],prereg_eff[,,c("wx_mu[2]")] - prereg_eff[,,c("wx_mu[3]")],along=3)
vec_ws_prereg <- apply(eff_dims,c(1,2),vec_optim,dvec=dvec_mat,init_pars=c(0,0)) #get vector weights
vec_ws_prereg_org <- aperm(vec_ws_prereg,c(2,3,1)) #rearrange dimensions
dimnames(vec_ws_prereg_org)[[3]] <- c("rew","rpe") #name appropriately
create_interval_plot(vec_ws_prereg_org,names = c("rpe","rew"),xmin = -.012, xmax = .01)
mean(vec_ws_prereg_org[,,"rew"] > vec_ws_prereg_org[,,"rpe"])
quantile(vec_ws_prereg_org[,,"rew"]/vec_ws_prereg_org[,,"rpe"],c(.025,.5,.975))
median(vec_ws_prereg_org[,,"rew"])
median(vec_ws_prereg_org[,,"rpe"])
median(prereg_eff[,,"wx_mu[2]"] - prereg_eff[,,"wx_mu[3]"])
quantile(prereg_eff[,,"wx_mu[2]"] - prereg_eff[,,"wx_mu[3]"],c(.025,.5,.975))
prereg$diagnostics$ESS
view(prereg$diagnostics$ESS)
view(prereg$diagnostics$Rhat)
vp_prereg <- get_draws("prereg_rva3",model_out_dir=model_out_dir,vars=c("val_pred"))
vp_prereg <- get_draws("prereg_rva3",model_out_dir=model_out_dir,vars=c("val_pred"))
pp_prereg <- get_draws("prereg_rva3",model_out_dir=model_out_dir,vars=c("prob_pred"))
ps_prereg <- get_draws("prereg_rva3",model_out_dir=model_out_dir,vars=c("prob_sigma"))
prob_rsq_prereg <- mcmc_rsq(pp_prereg,ps_prereg,print_plot=FALSE)
prob_rsq_prereg$sum['median']
vp_prereg <- get_draws("prereg_rva3",model_out_dir=model_out_dir,vars=c("val_pred"))
vss_prereg <- get_draws("prereg_rva3",model_out_dir=model_out_dir,vars=c("val_sigma_sigma"))
vs_prereg <- apply(vss_prereg,c(1,2,3),half_normal_mean)
val_rsq_prereg <- mcmc_rsq(vp_prereg,vs_prereg,print_plot=FALSE)
val_rsq_prereg$sum[['median']]
view(filt_sum(prereg$sum,"mu"))
-0.0018718597*48
library(sigmoid)
sigmoid(3.6797380191)
sigmoid(2)
sigmoid(5)
sigmoid(3.5)
sigmoid(3.7)
sigmoid(-1.8)
mn_data_prereg <- apply(prereg_eff,c(1,2),function(x) sum(abs(x))) #get the manhattan norms for each data vector by summing the absolute values
comb_array_prereg <- abind(vec_ws_prereg_org,mn_data_prereg,along=3) #staple mn_data to the back of the third dimension of the vector weight array
vec_ws_norm_prereg <- apply(comb_array_prereg,c(1,2),get_ports) #get portions of relationship accounted for
vec_ws_norm_org_prereg <- aperm(vec_ws_norm_prereg,c(2,3,1))
dimnames(vec_ws_norm_org_prereg)[[3]] <- c("rew","rpe","mm","resid") #name meaningfully
set.seed(7)
rew <- c(1,0)
rpe <- c(0.71,-0.71)
dvec_mat <- cbind(rew,rpe) #turn into matrix
eff_dims <- abind(prereg_eff[,,c("wx_mu[1]")],prereg_eff[,,c("wx_mu[2]")] - prereg_eff[,,c("wx_mu[3]")],along=3)
vec_ws_prereg <- apply(eff_dims,c(1,2),vec_optim,dvec=dvec_mat,init_pars=c(0,0)) #get vector weights
vec_ws_prereg_org <- aperm(vec_ws_prereg,c(2,3,1)) #rearrange dimensions
dimnames(vec_ws_prereg_org)[[3]] <- c("rew","rpe") #name appropriately
create_interval_plot(vec_ws_prereg_org,names = c("rpe","rew"),xmin = -.012, xmax = .01)
median(vec_ws_prereg_org[,,"rew"])
median(vec_ws_prereg_org[,,"rpe"])
create_interval_plot(arr = prereg_eff, xmin = -0.02, xmax = .01,names=c("wx_mu[3]","wx_mu[2]","wx_mu[1]"))
knitr::opts_chunk$set(echo = TRUE)
options(mc.cores=12)
path_to_project_directory <- "~/projects/RVA_3/"
path_to_s22 <- "~/projects/spring_2022_study/"
path_to_rva <- "~/projects/RVA/"
stan_model_dir<- paste0(path_to_project_directory,"code/stan_models/")
model_out_dir <- paste0(path_to_project_directory,"output/results/stan_model_fits/")
#load custom functions
source(paste0(path_to_s22,"code/functions/fit_stan_model.R"))
source(paste0(path_to_s22,"code/functions/s22_utilities.R"))
source(paste0(path_to_s22,"code/functions/stan_utilities.R"))
source(paste0(path_to_rva,"code/functions/rva_utilities.R"))
source(paste0(path_to_project_directory,"code/functions/rva3_utilities.R"))
library(tidyverse)
library(cmdstanr)
library(bayesplot)
library(abind)
library(sigmoid)
library(posterior)
trials <- read.csv(paste0(path_to_project_directory,"analysis_data/trial_level_data_all_subs_2025-03-06_19_00_16.812019.csv"))
subs <- read.csv(paste0(path_to_project_directory,"analysis_data/sub_level_data_all_subs_2025-03-06_19_00_16.812019.csv"))
sub_hard_fail <- subs %>% filter(att_checks_passed < 3 |
answers_incorrect > 3 |
sd_valrat < .04 |
sd_probrat < .05 |
valrat_skipped_percent > .15 |
probrat_skipped_percent > .15 |
trials_completed < 96)
#count the number of soft QC cutoffs each subject meets
subs$softs <- 0
for(i in 1:nrow(subs)){
subs$softs[i] <- length(which(c(subs$att_checks_passed[i] == 3,subs$answers_incorrect[i] == 3,
subs$valrat_skipped_percent[i] > .10,
subs$sd_probrat[i] < .07, subs$probrat_skipped_percent[i] > .10)))
}
sub_soft_fail <- filter(subs,softs >= 2) #identify those who meet more than 2 soft cutoffs
subs_to_exclude <- unique(c(sub_hard_fail$id,sub_soft_fail$id)) #get subjects who failed either set of criteria
#clean data
trials <- trials %>% filter(!(id %in% subs_to_exclude))
subs <- subs %>% filter(!(id %in% subs_to_exclude))
length(subs_to_exclude)/(nrow(subs)+length(subs_to_exclude)) #get percent excluded
trials <- add_sub_indices(trials) #add subject indices to the df. These will match the indices used in Stan.
trials <- add_probe_number(trials,newcol="vrat_number",val_col="val_rat") #add valence rating number
trials <- add_probe_number(trials,newcol="prat_number",val_col="prob_rat") #add probability rating number
# Create mean-centered block and trial numbers
trials <- mutate(trials, bl_cent = block - mean(block), tr_cent = trial_blk - mean(trial_blk))
# Add fractal indexes
trials <- trials %>% mutate(frac_ix = case_when(
frac_img == 1 ~ 1,
frac_img == 9 ~ 2,
frac_img == 3 ~ 3,
frac_img == 5 ~ 4,
)) %>%
mutate(alt_frac_ix = case_when(
frac_ix == 1 ~ 2,
frac_ix == 2 ~ 1,
frac_ix == 3 ~ 4,
frac_ix == 4 ~ 3
))
prereg_eff <- get_draws("prereg_rva3",model_out_dir=model_out_dir,vars=c("wx_mu"))
quantile(prereg_eff[,,"wx_mu[1"],c(.025,.5,.975))
prereg_eff[,,"wx_mu[1"]
head(prereg_eff)
quantile(prereg_eff[,,"wx_mu[1]"],c(.025,.5,.975))
quantile(prereg_eff[,,"wx_mu[1]"],c(.025,.5,.975))*100
quantile(prereg_eff[,,"wx_mu[2]"],c(.025,.5,.975))*100
quantile(prereg_eff[,,"wx_mu[3]"],c(.025,.5,.975))*100
quantile(prereg_eff[,,"wx_mu[2]"],c(.025,.5,.975))*100
prereg <- read_fsml("prereg",model_out_dir=model_out_dir)
prereg <- read_fsml("prereg_rva3",model_out_dir=model_out_dir)
view(filt_sum(prereg$sum,"mu"))
quantile(prereg_eff[,,"wx_mu[2]"],c(.025,.5,.975))*100
quantile(prereg_eff[,,"wx_mu[3]"],c(.025,.5,.975))*100
quantile(prereg_eff[,,"wx_mu[2]"] - prereg_eff[,,"wx_mu[3]"],c(.025,.5,.975))
quantile(prereg_eff[,,"wx_mu[2]"],c(.05,.5,.975))*100
mean(prereg_eff[,,"wx_mu[2]"]>0)
63/(105+63+1)
105+63+1
subs <- read.csv(paste0(path_to_project_directory,"analysis_data/sub_level_data_all_subs_2025-03-06_19_00_16.812019.csv"))
nrow(subs)
213-169
169/213
knitr::opts_chunk$set(echo = TRUE)
options(mc.cores=12)
path_to_project_directory <- "~/projects/RVA_3/"
path_to_s22 <- "~/projects/spring_2022_study/"
path_to_rva <- "~/projects/RVA/"
stan_model_dir<- paste0(path_to_project_directory,"code/stan_models/")
model_out_dir <- paste0(path_to_project_directory,"output/results/stan_model_fits/")
#load custom functions
source(paste0(path_to_s22,"code/functions/fit_stan_model.R"))
source(paste0(path_to_s22,"code/functions/s22_utilities.R"))
source(paste0(path_to_s22,"code/functions/stan_utilities.R"))
source(paste0(path_to_rva,"code/functions/rva_utilities.R"))
source(paste0(path_to_project_directory,"code/functions/rva3_utilities.R"))
library(tidyverse)
library(cmdstanr)
library(bayesplot)
library(abind)
library(sigmoid)
library(posterior)
trials <- read.csv(paste0(path_to_project_directory,"analysis_data/trial_level_data_all_subs_2025-03-06_19_00_16.812019.csv"))
subs <- read.csv(paste0(path_to_project_directory,"analysis_data/sub_level_data_all_subs_2025-03-06_19_00_16.812019.csv"))
sub_hard_fail <- subs %>% filter(att_checks_passed < 3 |
answers_incorrect > 3 |
sd_valrat < .04 |
sd_probrat < .05 |
valrat_skipped_percent > .15 |
probrat_skipped_percent > .15 |
trials_completed < 96)
#count the number of soft QC cutoffs each subject meets
subs$softs <- 0
for(i in 1:nrow(subs)){
subs$softs[i] <- length(which(c(subs$att_checks_passed[i] == 3,subs$answers_incorrect[i] == 3,
subs$valrat_skipped_percent[i] > .10,
subs$sd_probrat[i] < .07, subs$probrat_skipped_percent[i] > .10)))
}
sub_soft_fail <- filter(subs,softs >= 2) #identify those who meet more than 2 soft cutoffs
subs_to_exclude <- unique(c(sub_hard_fail$id,sub_soft_fail$id)) #get subjects who failed either set of criteria
#clean data
trials <- trials %>% filter(!(id %in% subs_to_exclude))
subs <- subs %>% filter(!(id %in% subs_to_exclude))
length(subs_to_exclude)/(nrow(subs)+length(subs_to_exclude)) #get percent excluded
nrow(subs)
subs_to_exclude
length(subs_to_exclude)
nrow(subs)
nrow(subs)+length(subs_to_exclude)
knitr::opts_chunk$set(echo = TRUE)
options(mc.cores=12)
path_to_project_directory <- "~/projects/RVA_3/"
path_to_s22 <- "~/projects/spring_2022_study/"
path_to_rva <- "~/projects/RVA/"
stan_model_dir<- paste0(path_to_project_directory,"code/stan_models/")
model_out_dir <- paste0(path_to_project_directory,"output/results/stan_model_fits/")
#load custom functions
source(paste0(path_to_s22,"code/functions/fit_stan_model.R"))
source(paste0(path_to_s22,"code/functions/s22_utilities.R"))
source(paste0(path_to_s22,"code/functions/stan_utilities.R"))
source(paste0(path_to_rva,"code/functions/rva_utilities.R"))
source(paste0(path_to_project_directory,"code/functions/rva3_utilities.R"))
library(tidyverse)
library(cmdstanr)
library(bayesplot)
library(abind)
library(sigmoid)
library(posterior)
trials <- read.csv(paste0(path_to_project_directory,"analysis_data/trial_level_data_all_subs_2025-03-06_19_00_16.812019.csv"))
subs <- read.csv(paste0(path_to_project_directory,"analysis_data/sub_level_data_all_subs_2025-03-06_19_00_16.812019.csv"))
sub_hard_fail <- subs %>% filter(att_checks_passed < 3 |
answers_incorrect > 3 |
sd_valrat < .04 |
sd_probrat < .05 |
valrat_skipped_percent > .15 |
probrat_skipped_percent > .15 |
trials_completed < 96)
#count the number of soft QC cutoffs each subject meets
subs$softs <- 0
for(i in 1:nrow(subs)){
subs$softs[i] <- length(which(c(subs$att_checks_passed[i] == 3,subs$answers_incorrect[i] == 3,
subs$valrat_skipped_percent[i] > .10,
subs$sd_probrat[i] < .07, subs$probrat_skipped_percent[i] > .10)))
}
sub_soft_fail <- filter(subs,softs >= 2) #identify those who meet more than 2 soft cutoffs
subs_to_exclude <- unique(c(sub_hard_fail$id,sub_soft_fail$id)) #get subjects who failed either set of criteria
#clean data
trials <- trials %>% filter(!(id %in% subs_to_exclude))
subs <- subs %>% filter(!(id %in% subs_to_exclude))
length(subs_to_exclude)/(nrow(subs)+length(subs_to_exclude)) #get percent excluded
trials <- add_sub_indices(trials) #add subject indices to the df. These will match the indices used in Stan.
trials <- add_probe_number(trials,newcol="vrat_number",val_col="val_rat") #add valence rating number
trials <- add_probe_number(trials,newcol="prat_number",val_col="prob_rat") #add probability rating number
# Create mean-centered block and trial numbers
trials <- mutate(trials, bl_cent = block - mean(block), tr_cent = trial_blk - mean(trial_blk))
# Add fractal indexes
trials <- trials %>% mutate(frac_ix = case_when(
frac_img == 1 ~ 1,
frac_img == 9 ~ 2,
frac_img == 3 ~ 3,
frac_img == 5 ~ 4,
)) %>%
mutate(alt_frac_ix = case_when(
frac_ix == 1 ~ 2,
frac_ix == 2 ~ 1,
frac_ix == 3 ~ 4,
frac_ix == 4 ~ 3
))
prereg_eff <- get_draws("prereg_rva3",model_out_dir=model_out_dir,vars=c("wx_mu"))
create_interval_plot(arr = prereg_eff, xmin = -0.02, xmax = .01,names=c("wx_mu[3]","wx_mu[2]","wx_mu[1]"))
mean(prereg_eff[,,"wx_mu[2]"] < prereg_eff[,,"wx_mu[3]"])
quantile(prereg_eff[,,"wx_mu[2]"] - prereg_eff[,,"wx_mu[3]"],c(.025,.5,.975))
knitr::opts_chunk$set(echo = TRUE)
options(mc.cores=12)
path_to_project_directory <- "~/projects/RVA_3/"
path_to_s22 <- "~/projects/spring_2022_study/"
path_to_rva <- "~/projects/RVA/"
stan_model_dir<- paste0(path_to_project_directory,"code/stan_models/")
model_out_dir <- paste0(path_to_project_directory,"output/results/stan_model_fits/")
#load custom functions
source(paste0(path_to_s22,"code/functions/fit_stan_model.R"))
source(paste0(path_to_s22,"code/functions/s22_utilities.R"))
source(paste0(path_to_s22,"code/functions/stan_utilities.R"))
source(paste0(path_to_rva,"code/functions/rva_utilities.R"))
source(paste0(path_to_project_directory,"code/functions/rva3_utilities.R"))
library(tidyverse)
library(cmdstanr)
library(bayesplot)
library(abind)
library(sigmoid)
library(posterior)
trials <- read.csv(paste0(path_to_project_directory,"analysis_data/trial_level_data_all_subs_2025-03-06_19_00_16.812019.csv"))
subs <- read.csv(paste0(path_to_project_directory,"analysis_data/sub_level_data_all_subs_2025-03-06_19_00_16.812019.csv"))
sub_hard_fail <- subs %>% filter(att_checks_passed < 3 |
answers_incorrect > 3 |
sd_valrat < .04 |
sd_probrat < .05 |
valrat_skipped_percent > .15 |
probrat_skipped_percent > .15 |
trials_completed < 96)
#count the number of soft QC cutoffs each subject meets
subs$softs <- 0
for(i in 1:nrow(subs)){
subs$softs[i] <- length(which(c(subs$att_checks_passed[i] == 3,subs$answers_incorrect[i] == 3,
subs$valrat_skipped_percent[i] > .10,
subs$sd_probrat[i] < .07, subs$probrat_skipped_percent[i] > .10)))
}
sub_soft_fail <- filter(subs,softs >= 2) #identify those who meet more than 2 soft cutoffs
subs_to_exclude <- unique(c(sub_hard_fail$id,sub_soft_fail$id)) #get subjects who failed either set of criteria
#clean data
trials <- trials %>% filter(!(id %in% subs_to_exclude))
subs <- subs %>% filter(!(id %in% subs_to_exclude))
length(subs_to_exclude)/(nrow(subs)+length(subs_to_exclude)) #get percent excluded
trials <- add_sub_indices(trials) #add subject indices to the df. These will match the indices used in Stan.
trials <- add_probe_number(trials,newcol="vrat_number",val_col="val_rat") #add valence rating number
trials <- add_probe_number(trials,newcol="prat_number",val_col="prob_rat") #add probability rating number
# Create mean-centered block and trial numbers
trials <- mutate(trials, bl_cent = block - mean(block), tr_cent = trial_blk - mean(trial_blk))
# Add fractal indexes
trials <- trials %>% mutate(frac_ix = case_when(
frac_img == 1 ~ 1,
frac_img == 9 ~ 2,
frac_img == 3 ~ 3,
frac_img == 5 ~ 4,
)) %>%
mutate(alt_frac_ix = case_when(
frac_ix == 1 ~ 2,
frac_ix == 2 ~ 1,
frac_ix == 3 ~ 4,
frac_ix == 4 ~ 3
))
head(prereg$diagnostics)
prereg <- read_cmdstan_fit("prereg",model_out_dir=model_out_dir)
prereg <- read_fsml("prereg",model_out_dir=model_out_dir)
prereg <- read_fsml("prereg_rva3",model_out_dir=model_out_dir)
head(prereg$diagnostics)
view(prereg$Rhat[order(-prereg$Rhat$rhat), ])
prereg$Rhat$rhat
prereg_rhat <- prereg$diagnostics$Rhat
view(prereg_rhat[order(-prereg_rhat$rhat), ]
view(prereg_rhat[order(-prereg_rhat$rhat), ])
prereg_rhat[order(-prereg_rhat$rhat), ]
filt_sum(prereg_rhat,"^w")
view(filt_sum(prereg_rhat,"^w"))
filt_sum(prereg_rhat,"^[^w]") # everything but
prereg_ess <- prereg$diagnostics$ESS
prereg_ess[order(-prereg_ess$ess_bulk), ]
prereg_ess[order(prereg_ess$ess_bulk), ]
view(prereg_ess[order(prereg_ess$ess_bulk), ])
filt_sum(prereg_ess,"^w") # only weights
view(filt_sum(prereg_ess,"^w"))
filt_sum(prereg_ess,"^[^w]") # everything but
view(filt_sum(prereg_ess,"^[^w]"))
view(prereg_ess[order(prereg_ess$ess_bulk), ])
view(prereg_ess[order(prereg_ess$ess_bulk), ])
wx_mu_draws <- get_draws("prereg_rva3",model_out_dir=model_out_dir,vars=c("wx_mu"))
wx_mu <- get_draws("prereg_rva3",model_out_dir=model_out_dir,vars=c("wx_mu"))
mcmc_trace(wx_mu)
wx_mu1 <- get_draws("prereg_rva3",model_out_dir=model_out_dir,vars=c("wx_mu[1]"))
wx_mu <- ""
mcmc_trace(wx_mu1)
w_bl_mu <- get_draws("prereg_rva3",model_out_dir=model_out_dir,vars=c("w_bl_mu"))
mcmc_trace(w_bl_mu)
w_bl_mu <- get_draws("prereg_rva3",model_out_dir=model_out_dir,vars=c("w_bl_mu"))
mcmc_trace(w_bl_mu)
nrow(subs)
wx <- get_draws("prereg_rva3",model_out_dir=model_out_dir,vars=c("wx"))
wx <- get_draws("prereg_rva3",model_out_dir=model_out_dir,vars=c("wx_mu"))
wx_mu <- get_draws("prereg_rva3",model_out_dir=model_out_dir,vars=c("wx_mu"))
wx_sigma <- get_draws("prereg_rva3",model_out_dir=model_out_dir,vars=c("wx_sigma"))
wx_mu_sigma <- abind(wx_mu,wx_sigma,along=3)
mcmc_pairs(wx_mu_sigma)
wx_mu_sigma_pair <- mcmc_pairs(wx_mu_sigma)
model_diags_dir <- paste0(path_to_project_directory,"output/diagnostics/")
ggsave(paste0(model_diags_dir,"prereg/pairs.pdf",),plot,width=40,height=40,device="pdf")
ggsave(paste0(model_diags_dir,"prereg/pairs.pdf"),plot,width=40,height=40,device="pdf")
paste0(model_diags_dir,"prereg/pairs.pdf")
ggsave(paste0(model_diags_dir,"prereg/pairs.pdf"),wx_mu_sigma_pair,width=40,height=40,device="pdf")
ggsave(paste0(model_diags_dir,"prereg_pairs.pdf"),wx_mu_sigma_pair,width=40,height=40,device="pdf")
ggsave(paste0(model_diags_dir,"prereg_pairs_wxmu.pdf"),wx_mu_sigma_pair,width=40,height=40,device="pdf")
w_0_mu <- get_draws("prereg_rva3",model_out_dir=model_out_dir,vars=c("w_0_mu"))
w_0_sigma <- get_draws("prereg_rva3",model_out_dir=model_out_dir,vars=c("w_0_sigma"))
w_tr_mu <- get_draws("prereg_rva3",model_out_dir=model_out_dir,vars=c("w_tr_mu"))
w_tr_sigma <- get_draws("prereg_rva3",model_out_dir=model_out_dir,vars=c("w_tr_sigma"))
w_bl_mu <- get_draws("prereg_rva3",model_out_dir=model_out_dir,vars=c("w_bl_mu"))
w_bl_sigma <- get_draws("prereg_rva3",model_out_dir=model_out_dir,vars=c("w_bl_sigma"))
w_mu_sigma <- abind(wx_mu_sigma,w_0_mu,w_0_sigma,w_tr_mu,w_tr_sigma,w_bl_mu,w_bl_sigma,along=3)
w_mu_sigma_pair <- mcmc_pairs(w_mu_sigma)
w_mu_sigma_pair <- mcmc_pairs(w_mu_sigma)
ggsave(paste0(model_diags_dir,"prereg_pairs_ws.pdf"),wx_mu_sigma_pair,width=40,height=40,device="pdf")
ggsave(paste0(model_diags_dir,"prereg_pairs_ws.pdf"),w_mu_sigma_pair,width=40,height=40,device="pdf")
w_mu_sigma <- abind(wx_mu,wx_sigma,w_0_mu,w_0_sigma,w_tr_mu,w_tr_sigma,w_bl_mu,w_bl_sigma,along=3)
w_mu_sigma_pair <- mcmc_pairs(w_mu_sigma)
ggsave(paste0(model_diags_dir,"prereg_pairs_ws.pdf"),w_mu_sigma_pair,width=40,height=40,device="pdf")
w_mu_sigma_pair_hex <- mcmc_hex(w_mu_sigma)
install.packages("hexbin")
w_mu_sigma_pair_hex <- mcmc_hex(w_mu_sigma)
library(mcmc_hex)
view(filt_sum(prereg$sum,"mu|sigma"))
view(filt_sum(prereg$sum,"mu"))
alpha_mu <- get_draws("prereg_rva3",model_out_dir=model_out_dir,vars=c("alpha_mu"))
alpha_sigma <- get_draws("prereg_rva3",model_out_dir=model_out_dir,vars=c("alpha_sigma"))
forget_cns_mu <- get_draws("prereg_rva3",model_out_dir=model_out_dir,vars=c("forget_cns_mu"))
forget_cns_sigma <- get_draws("prereg_rva3",model_out_dir=model_out_dir,vars=c("forget_cns_sigma"))
forget_rns_mu <- get_draws("prereg_rva3",model_out_dir=model_out_dir,vars=c("forget_rns_mu"))
forget_rns_sigma <- get_draws("prereg_rva3",model_out_dir=model_out_dir,vars=c("forget_rns_sigma"))
gamma_mu <- get_draws("prereg_rva3",model_out_dir=model_out_dir,vars=c("gamma_mu"))
gamma_sigma <- get_draws("prereg_rva3",model_out_dir=model_out_dir,vars=c("gamma_sigma"))
mu_sigma <- abind(wx_mu,wx_sigma,w_0_mu,w_0_sigma,w_tr_mu,w_tr_sigma,w_bl_mu,w_bl_sigma,alpha_mu,alpha_sigma,
forget_cns_mu,forget_cns_sigma,forget_rns_mu,forget_rns_sigma,gamma_mu,gamma_sigma,along=3)
mu_sigma_pair <- mcmc_pairs(mu_sigma)
ggsave(paste0(model_diags_dir,"prereg_pairs_mu_sigma.pdf"),mu_sigma_pair,width=40,height=40,device="pdf")
mu_sigma <- abind(wx_mu,wx_sigma,w_0_mu,w_0_sigma,w_tr_mu,w_tr_sigma,w_bl_mu,w_bl_sigma,alpha_mu,alpha_sigma,
forget_cns_mu,forget_cns_sigma,forget_rns_mu,forget_rns_sigma,gamma_mu,gamma_sigma,
prob_sigma,val_sigma_sigma,along=3)
prob_sigma <- get_draws("prereg_rva3",model_out_dir=model_out_dir,vars=c("prob_sigma"))
val_sigma_sigma <- get_draws("prereg_rva3",model_out_dir=model_out_dir,vars=c("val_sigma_sigma"))
mu_sigma <- abind(wx_mu,wx_sigma,w_0_mu,w_0_sigma,w_tr_mu,w_tr_sigma,w_bl_mu,w_bl_sigma,alpha_mu,alpha_sigma,
forget_cns_mu,forget_cns_sigma,forget_rns_mu,forget_rns_sigma,gamma_mu,gamma_sigma,
prob_sigma,val_sigma_sigma,along=3)
mu_sigma_pair <- mcmc_pairs(mu_sigma)
ggsave(paste0(model_diags_dir,"prereg_pairs_mu_sigma.pdf"),mu_sigma_pair,width=40,height=40,device="pdf")
ncp_mean_hist(prereg$sum,"wx")
ncp_mean_hist(prereg$sum,"wx[,1]")
sub_level_wx1 <- filt_sum(prereg$sum,"^wx\[\d+,1\]$")
sub_level_wx1 <- filt_sum(prereg$sum,"^wx[\d+,1\]$")
sub_level_wx1 <- filt_sum(prereg$sum,"^wx\\[\\d+,1\\]$")
view(sub_level_wx1)
view(filt_sum(prereg$sum,"wx"))
sub_level_wx1 <- filt_sum(prereg$sum,"wx_z\\[\\d+,1\\]$")
view(sub_level_wx1)
hist(sub_level_wx1$median)
sub_level_wx1_means <- sub_level_wx1$mean
sub_level_wx1s <- (sub_level_wx1_means*0.0056286284 + 0.0047753663)*100
hist(sub_level_wx1s)
sub_level_wx1s <- sub_level_wx1_means*0.0056286284 + 0.0047753663
hist(sub_level_wx1s)
