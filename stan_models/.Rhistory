knitr::opts_chunk$set(echo = TRUE)
options(mc.cores=12)
path_to_project_directory <- "~/projects/RVA_2/"
path_to_s22 <- "~/projects/spring_2022_study/"
path_to_rva <- "~/projects/RVA/"
stan_model_dir<- paste0(path_to_project_directory,"code/stan_models/")
model_out_dir <- paste0(path_to_project_directory,"output/results/stan_model_fits/")
#load custom functions
source(paste0(path_to_s22,"code/functions/fit_stan_model.R"))
source(paste0(path_to_s22,"code/functions/s22_utilities.R"))
source(paste0(path_to_s22,"code/functions/stan_utilities.R"))
source(paste0(path_to_rva,"code/functions/rva_utilities.R"))
source(paste0(path_to_project_directory,"code/functions/rva2_utilities.R"))
library(tidyverse)
library(cmdstanr)
library(bayesplot)
library(abind)
library(sigmoid)
library(posterior)
trials <- read.csv(paste0(path_to_project_directory,"analysis_data/trial_level_data_all_subs_2024-09-06_14_00_57.801362.csv"))
subs <- read.csv(paste0(path_to_project_directory,"analysis_data/sub_level_data_all_subs_2024-09-06_14_00_57.801362.csv"))
sub_hard_fail <- subs %>% filter(att_checks_passed < 3 |
answers_incorrect > 2 |
sd_valrat < .05 |
sd_probrat < .05 |
valrat_skipped_percent > .15 |
probrat_skipped_percent > .15 |
trials_completed < 80)
#count the number of soft QC cutoffs each subject meets
subs$softs <- 0
for(i in 1:nrow(subs)){
subs$softs[i] <- length(which(c(subs$att_checks_passed[i] == 3,subs$answers_incorrect[i] == 2,
subs$sd_valrat[i] < .07, subs$valrat_skipped_percent[i] > .10,
subs$sd_probrat[i] < .07, subs$probrat_skipped_percent[i] > .10)))
}
sub_soft_fail <- filter(subs,softs >= 2) #identify those who meet more than 2 soft cutoffs
subs_to_exclude <- unique(c(sub_hard_fail$id,sub_soft_fail$id)) #get subjects who failed either set of criteria
#clean data
trials <- trials %>% filter(!(id %in% subs_to_exclude))
subs <- subs %>% filter(!(id %in% subs_to_exclude))
length(subs_to_exclude)/(nrow(subs)+length(subs_to_exclude)) #get percent excluded
trials <- add_sub_indices(trials) #add subject indices to the df. These will match the indices used in Stan.
trials <- add_probe_number(trials,newcol="vrat_number",val_col="val_rat") #add valence rating number
trials <- add_probe_number(trials,newcol="prat_number",val_col="prob_rat") #add probability rating number
trials$prev_vrat_cent <- trials$prev_rate - mean(trials$prev_rate,na.rm=T)
trials <- trials %>% mutate(frac_ix = case_when(
frac_img == 1 ~ 1,
frac_img == 9 ~ 2,
frac_img == 3 ~ 3,
frac_img == 5 ~ 4,
)) %>%
mutate(alt_frac_ix = case_when(
frac_ix == 1 ~ 2,
frac_ix == 2 ~ 1,
frac_ix == 3 ~ 4,
frac_ix == 4 ~ 3
))
get_ci_pd(model_name="v_resid2",var_name="B_rew_mu",model_out_dir=model_out_dir,scale=100)
get_ci_pd(model_name="v_resid2",var_name="B_V_mu",model_out_dir=model_out_dir,scale=100)
get_ci_pd(model_name="v_resid2",var_name="B_V_r_mu",model_out_dir=model_out_dir,scale=100)
get_ci_pd(model_name="v_resid2",var_name="B_alt_mu",model_out_dir=model_out_dir,scale=100)
get_ci_pd(model_name="v_resid2",var_name="B_alt_r_mu",model_out_dir=model_out_dir,scale=100)
get_ci_pd(model_name="v_resid2",diff_vars=c("B_rew_mu","B_V_mu"),model_out_dir=model_out_dir,scale=100)
get_ci_pd(model_name="v_resid2",diff_vars=c("B_V_mu","B_alt_mu"),model_out_dir=model_out_dir,scale=100)
get_ci_pd(model_name="v_resid2",diff_vars=c("B_V_r_mu","B_alt_r_mu"),model_out_dir=model_out_dir,scale=100)
get_ci_pd(model_name="v_resid2",var_name="B_rew_mu",model_out_dir=model_out_dir,scale=100)
get_ci_pd(model_name="v_resid2",var_name="B_V_mu",model_out_dir=model_out_dir,scale=100)
get_ci_pd(model_name="v_resid2",var_name="B_V_r_mu",model_out_dir=model_out_dir,scale=100)
get_ci_pd(model_name="v_resid2",var_name="B_rew_mu",model_out_dir=model_out_dir,scale=100)
get_ci_pd(model_name="v_resid2",var_name="B_V_mu",model_out_dir=model_out_dir,scale=100)
get_ci_pd(model_name="v_resid2",var_name="B_V_r_mu",model_out_dir=model_out_dir,scale=100)
get_ci_pd(model_name="v_resid2",var_name="B_alt_mu",model_out_dir=model_out_dir,scale=100)
get_ci_pd(model_name="v_resid2",var_name="B_alt_r_mu",model_out_dir=model_out_dir,scale=100)
get_ci_pd(model_name="v_resid2",diff_vars=c("B_rew_mu","B_V_mu"),model_out_dir=model_out_dir,scale=100)
get_ci_pd(model_name="v_resid2",diff_vars=c("B_V_mu","B_alt_mu"),model_out_dir=model_out_dir,scale=100)
get_ci_pd(model_name="v_resid2",diff_vars=c("B_V_r_mu","B_alt_r_mu"),model_out_dir=model_out_dir,scale=100)
# Get info on the posterior distribution for all relevant parameters
mu_table <- select(filt_sum(v_resid2$sum,"mu"),variable,median,q5,q95)
v_resid2 <- read_fsml("v_resid2",model_out_dir=model_out_dir)
# Get info on the posterior distribution for all relevant parameters
mu_table <- select(filt_sum(v_resid2$sum,"mu"),variable,median,q5,q95)
mu_table[2,3,4] <- as.numeric(mu_table[2,3,4])
view(mu_table)
mu_table[1:2,2:4] <- sigmoid(mu_table[1:2,2:4]) # Transform learning and forgetting rate to original scale
view(mu_table)
mu_table[c(4:8),2:4] <- mu_table[c(4:8),2:4]*100 # Multiply certiain effects by 100, to be more readable
mu_table[,c("median","q5","q95")] <- round(mu_table[,c("median","q5","q95")],2)
#write.csv(mu_table,paste0(fig_dir,"params_tab_s2.csv")) #this CSV will be converted into a figure
write.csv(mu_table,"~/Documents/manuscripts/rva/figures_tables/param_tabs/s2/params_tab_s2.csv")
#write.csv(mu_table,paste0(fig_dir,"params_tab_s2.csv")) #this CSV will be converted into a figure
write.csv(mu_table,"~/Documents/manuscripts/rva/figures_tables/param_tabs/params_tab_s2.csv")
